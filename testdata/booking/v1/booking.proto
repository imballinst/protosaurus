// Copyright 2022 Protosaurus Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Adapted from https://github.com/pseudomuto/protoc-gen-doc/blob/master/examples/proto/Booking.proto.

// Booking
//
// This file is really just an example. The data model is completely fictional.
syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/duration.proto";
import "validate/validate.proto";
import "location/v1/location.proto";

package booking.v1;

// Represents the booking status ID.
message BookingStatusID {
  // Unique booking status ID.
  int32 id = 1;
}

// Represents the status of a vehicle booking.
message BookingStatus {
  // Unique booking status ID.
  int32 id = 1;
  // Booking status description. E.g. "Active".
  string description = 2 [(google.api.field_behavior) = REQUIRED, (validate.rules).string.min_len = 1];
  // Duration.
  google.protobuf.Duration duration = 3;
}

// Represents the booking of a vehicle.
//
// Vehicles are some cool shit. But drive carefully.
message Booking {
  // ID of booked vehicle.
  int32 vehicle_id = 1;
  // Customer that booked the vehicle.
  int32 customer_id = 2;
  // Status of the booking.
  BookingStatus status = 3;

  // Has booking confirmation been sent.
  bool confirmation_sent = 4;

  // Has payment been received.
  bool payment_received = 5;

  // Color preference of the customer.
  string color_preference = 6 [deprecated = true];

  // Pick-up location.
  // This is a coordinate.
  location.v1.Location pickup_location = 7;

  // Destination location.
  // This is a coordinate.
  location.v1.Location destination_location = 8;

  // Intermediate locations.
  repeated location.v1.Location intermediate_locations = 9;

  enum BookingPriority {
    NORMAL = 0;
    PRO = 1;
    ENTERPRISE = 2;
  }

  // Describes the priority of the booking.
  // The higher the level is, the faster the process will be.
  BookingPriority priority = 10;

  enum JourneyStatus {
    option allow_alias = true;
    UNKNOWN = 0;
    STARTED = 1;
    DEPARTED = 1;
    ARRIVED = 2;
  }

  // Describes the status of the journey.
  JourneyStatus journey_status = 11;
}

// Test enum outside.
// We have tested enum inside Message, but we haven't for outside.
enum TestEnumOutside {
  HELLO = 0;
  WORLD = 1;
}

// An empty message for testing
message EmptyBookingMessage {}

// Service for handling vehicle bookings.
service BookingService {
  // Used to book a vehicle. Pass in a Booking and a BookingStatus will be
  // returned.
  rpc BookVehicle(Booking) returns (BookingStatus) {
    option (google.api.http) = {
      post: "/api/bookings/vehicle/{vehicle_id}"
      body: "*"
    };
  }

  // Used to subscribe to updates of the BookingStatus.
  rpc BookingUpdates(BookingStatusID) returns (stream BookingStatus);
}
